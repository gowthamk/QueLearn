(declare-datatypes () ((Eff (ea0) (ea1) (ea2) (eb0) (eb1))))
(declare-sort Id)
(declare-sort Stringe)
(declare-sort Fn)
(declare-datatypes () ((Oper (NT (userId Id) (content Stringe)) (GT) (NTTL (tweetIdA Id)) (GTTL) (NTUL (tweetIdB Id)) (GTUL) (NOP))))
(declare-fun in_S (Eff) Bool)
(declare-fun so (Eff Eff) Bool)
(declare-fun hb (Eff Eff) Bool)
(declare-fun vis (Eff Eff) Bool)
(declare-fun objid (Eff) Id)
(declare-fun sameobj (Eff Eff) Bool)
(declare-fun none_stringe () Stringe)
(declare-fun oper (Eff) Oper)
(declare-fun fn (Eff) Fn)
(assert (forall ((x Eff))
    (= (not (in_S x)) (or (= x ea0) (= x ea1) (= x ea2) (= x eb0) (= x eb1)))))
(assert (forall ((a Eff) (b Eff) (c Eff)) 
    (=> (and (so a b) (so b c)) (so a c))))
(assert (forall ((a Eff) (b Eff)) 
    (=> (or (vis a b) (so a b)) (hb a b))))
(assert (forall ((a Eff) (b Eff) (c Eff)) 
    (=> (and (hb a b) (hb b c)) (hb a c))))
(assert (forall ((e Eff)) (not (hb e e))))
(assert (forall ((a Eff) (b Eff)) 
    (= (sameobj a b) (= (objid a) (objid b)))))
; vis => sameobj
(assert (forall ((a Eff)(b Eff)) 
  (=> (vis a b) (sameobj a b))))
(assert (forall ((x Eff) (y Eff)) 
    (=> (in_S y) (not (or (vis x y) (so x y))))))
; eb0 and eb1 are GTUL and GT witness operations.
(assert (= (oper eb0) GTUL))
(assert (= (oper eb1) GT))
; They are in so
(assert (so eb0 eb1))
; Their function is GET_USERLINE
(declare-const GET_USERLINE Fn)
(assert (= (fn eb0) GET_USERLINE))
(assert (= (fn eb1) GET_USERLINE))
; Define State
(declare-sort State)
(declare-const S0 State)
(declare-const S State)
(declare-const S1 State)
; Define getTweet as a function that, given a state, a tweetId, and 
; an effect, returns the tweet stringe corresponding to the tweetId,
; the NewTweet effect is visible, else returns none stringe.
(declare-fun getTweet (State Eff Id) Stringe)
; Define getTweetsInUL as a function that, given a state, a userId, a
; tweetId, and an effect, computes if the tweet corresponding to the
; tweetId is available (visible to the effect) to be included in the UL. 
(declare-fun getTweetsInUL (State Eff Id Id) Bool)
; State S0 is the common prefix, so all effects witness the same
; result w.r.t S0.
(assert (forall ((n1 Eff)(n2 Eff)(id Id)) 
      (= (getTweet S0 n1 id) (getTweet S0 n2 id))))
(assert (forall ((n1 Eff)(n2 Eff)(uid Id)(tid Id)) 
      (= (getTweetsInUL S0 n1 uid tid) (getTweetsInUL S0 n2 uid tid))))
; State S, the pre-state, is same as S0, since k=0.
(assert (= S S0))
; Assert invariant in the pre-state
(assert (forall ((uid Id)(tid Id)) 
    (=> (getTweetsInUL S eb0 uid tid)
        (not (= (getTweet S eb1 tid) none_stringe)))))
; Execute newTweet txn
(declare-const ADD_NEW_TWEET Fn)
(declare-const uid0 Id)
; Define a string that is not none_stringe
(declare-const stringe0 Stringe)
(assert (not (= stringe0 none_stringe)))
(declare-const tid0 Id)
(assert (= (oper ea0) (NT uid0 stringe0)))
(assert (= (objid ea0) tid0))
(assert (= (fn ea0) ADD_NEW_TWEET))
(declare-const ulid0 Id)
(assert (= (oper ea1) (NTUL tid0)))
(assert (= (objid ea1) ulid0))
(assert (= (fn ea1) ADD_NEW_TWEET))
(declare-const tlid0 Id)
(assert (= (oper ea2) (NTTL tid0)))
(assert (= (objid ea2) tlid0))
(assert (= (fn ea2) ADD_NEW_TWEET))
(assert (and (so ea0 ea1) (so ea1 ea2)))
; S1 is S U {ea0,ea1,ea2}.
; Define getTweet under S1.
(assert (forall ((a Eff) (b Id))
  (ite (and (vis ea0 a) (is-NT (oper ea0)) (= (objid ea0) b))
       (= (getTweet S1 a b) (content (oper ea0)))
       (ite (and (vis ea1 a) (is-NT (oper ea1)) (= (objid ea1) b))
            (= (getTweet S1 a b) (content (oper ea1)))
            (ite (and (vis ea2 a) (is-NT (oper ea2)) (= (objid ea2) b))
                 (= (getTweet S1 a b) (content (oper ea2)))
                 (= (getTweet S1 a b) (getTweet S a b)))))))
; Define getTweetsInUL under S1.
(assert (forall ((a Eff) (b Id) (c Id)) 
    (= (getTweetsInUL S1 a b c)
       (or (and (vis ea0 a) (is-NTUL (oper ea0)) 
                (= (objid ea0) b) (= (tweetIdB (oper ea0)) c))
           (and (vis ea1 a) (is-NTUL (oper ea1)) 
                (= (objid ea1) b) (= (tweetIdB (oper ea1)) c))     
           (and (vis ea2 a) (is-NTUL (oper ea2)) 
                (= (objid ea2) b) (= (tweetIdB (oper ea2)) c))
           (getTweetsInUL S a b c)))))
(declare-const Inv Bool)
(assert (= Inv (forall ((uid Id)(tid Id)) 
    (=> (getTweetsInUL S1 eb0 uid tid)
        (not (= (getTweet S1 eb1 tid) none_stringe))))))
(assert (not Inv))
(assert-soft (not (vis ea0 ea1)) :weight 1 :id soft)
(assert-soft (not (vis ea0 ea2)) :weight 1 :id soft)
(assert-soft (not (vis ea1 ea2)) :weight 1 :id soft)
(assert-soft (not (vis ea0 eb0)) :weight 1 :id soft)
(assert-soft (not (vis ea0 eb1)) :weight 1 :id soft)
(assert-soft (not (vis ea1 eb0)) :weight 1 :id soft)
(assert-soft (not (vis ea1 eb1)) :weight 1 :id soft)
(assert-soft (not (vis ea2 eb0)) :weight 1 :id soft)
(assert-soft (not (vis ea2 eb1)) :weight 1 :id soft)
(check-sat)
(get-model)
